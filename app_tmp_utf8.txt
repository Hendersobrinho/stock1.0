"""Aplicativo principal (GUI) do sistema de Controle de Estoque e Vendas.Este arquivo inicializa a aplicaÃ§Ã£o Tkinter, exibe a tela de login e,apÃ³s autenticaÃ§Ã£o, apresenta as abas de Produtos, Vendas e RelatÃ³rios.Requisitos: Python 3.10+"""from __future__ import annotationsimport tkinter as tkfrom tkinter import ttk, messageboxfrom db import Databasefrom utils import try_generate_iconfrom views.login_view import LoginFramefrom views.product_view import ProductFramefrom views.sales_view import SalesFramefrom views.reports_view import ReportsFramefrom views.fulfillment_view import FulfillmentFrameclass App(tk.Tk):    """Classe principal da aplicaÃ§Ã£o.    ResponsÃ¡vel por:    - Instanciar a base de dados    - Exibir o fluxo de login    - Criar e gerenciar as abas principais apÃ³s autenticaÃ§Ã£o    """    def __init__(self) -> None:        super().__init__()        self.title("Controle de Estoque e Vendas")        self.geometry("1000x640")        self.minsize(960, 600)        # Ãcone da janela (opcional): usa Ã­cone prÃ©-gerado, ou gera um simples via Pillow        try:            # Preferir Ã­cone gerado pelo script (se existir)            import os, sys            # Em Windows, definir AppUserModelID ajuda a fixar o Ã­cone na barra de tarefas            if sys.platform == "win32":                try:                    import ctypes  # type: ignore                    ctypes.windll.shell32.SetCurrentProcessExplicitAppUserModelID("control_stock.app.1.0")                except Exception:                    pass            ico = os.path.abspath(os.path.join("data", "icon.ico"))            if os.path.exists(ico):                self.iconbitmap(ico)  # type: ignore[arg-type]            else:                icon_path = try_generate_icon()                if icon_path:                    self.iconbitmap(os.path.abspath(str(icon_path)))  # type: ignore[arg-type]            # Fallback PNG (todas as plataformas): carrega mÃºltiplos tamanhos para melhor nitidez            try:                from PIL import Image, ImageTk  # type: ignore                sizes = [16, 24, 32, 48, 64, 128, 256]                self._icon_photos = []                for s in sizes:                    path = os.path.abspath(os.path.join("assets", f"logo_{s}.png"))                    if not os.path.exists(path):                        continue                    im = Image.open(path).convert("RGBA")                    self._icon_photos.append(ImageTk.PhotoImage(im))                if self._icon_photos:                    self.iconphoto(True, *self._icon_photos)            except Exception:                # Fallback sem Pillow                png = os.path.abspath(os.path.join("assets", "logo_small.png"))                if os.path.exists(png):                    try:                        self._icon_photo = tk.PhotoImage(file=png)                        self.iconphoto(True, self._icon_photo)                    except Exception:                        pass        except Exception:            # Ãcone Ã© opcional; se falhar, seguimos sem definir            pass        # Barra superior com logo e tÃ­tulo        self._build_header()        # InstÃ¢ncia central do banco de dados        self.db = Database("data/estoque.db")        # Container principal; iniciamos com a tela de login        self._main_container = ttk.Frame(self)        self._main_container.pack(fill=tk.BOTH, expand=True)        self.login_frame: LoginFrame | None = None        self.notebook: ttk.Notebook | None = None        # Primeiro cria a barra de menu        self._build_menubar()        # Exibe a tela de login somente agora (menus e atributos jÃ¡ prontos)        self.show_login()    def _build_header(self) -> None:        """Cria uma barra superior com a logo e o tÃ­tulo do sistema."""        import os        bar = ttk.Frame(self)        bar.pack(side=tk.TOP, fill=tk.X)        # Carrega a logo para a barra com melhor ajuste ao DPI        self._logo_img = None        # Estima fator de escala (DPI) do Tk para escolher tamanho adequado        try:            dpi_scale = float(self.winfo_fpixels('1i')) / 72.0        except Exception:            dpi_scale = 1.0        target = 32        size = 32        if dpi_scale >= 1.75:            size = 48        elif dpi_scale >= 1.25:            size = 40        # Seleciona arquivo mais prÃ³ximo        candidates = [32, 40, 48, 64]        pick = min(candidates, key=lambda s: abs(s - size))        try:            from PIL import Image, ImageTk  # type: ignore            p = os.path.join("assets", f"logo_{pick if pick in (32,48,64) else 32}.png")            if not os.path.exists(p):                p = os.path.join("assets", "logo_32.png")            if os.path.exists(p):                im = Image.open(p).convert("RGBA")                self._logo_img = ImageTk.PhotoImage(im)                ttk.Label(bar, image=self._logo_img).pack(side=tk.LEFT, padx=(10, 8), pady=6)        except Exception:            p = os.path.join("assets", "logo_32.png")            if os.path.exists(p):                self._logo_img = tk.PhotoImage(file=p)                ttk.Label(bar, image=self._logo_img).pack(side=tk.LEFT, padx=(10, 8), pady=6)        ttk.Label(bar, text="Controle de Estoque e Vendas", font=("Segoe UI", 12, "bold")).pack(            side=tk.LEFT, pady=6        )        # (login Ã© mostrado no final do __init__ apÃ³s menus/atributos)    def _build_menubar(self) -> None:        """Cria a barra de menu da aplicaÃ§Ã£o."""        menubar = tk.Menu(self)        self.config(menu=menubar)        self.menu_sistema = tk.Menu(menubar, tearoff=0)        self.menu_sistema.add_command(label="Sair", command=self.quit)        menubar.add_cascade(label="Sistema", menu=self.menu_sistema)        self.menu_sessao = tk.Menu(menubar, tearoff=0)        self.menu_sessao.add_command(label="Logout", command=self.logout, state=tk.DISABLED)        menubar.add_cascade(label="SessÃ£o", menu=self.menu_sessao)    def show_login(self) -> None:        """Exibe a tela de login, destruindo a interface principal se existir."""        # Esconde/destrÃ³i as abas se elas existirem        if self.notebook is not None:            self.notebook.destroy()            self.notebook = None        # Desabilita opÃ§Ã£o de logout atÃ© logar        self.menu_sessao.entryconfig("Logout", state=tk.DISABLED)        # Cria e mostra o frame de login        self.login_frame = LoginFrame(self._main_container, self.db, on_success=self._on_login_success)        self.login_frame.pack(fill=tk.BOTH, expand=True, padx=16, pady=16)    def _on_login_success(self, username: str) -> None:        """Callback chamado apÃ³s login bem-sucedido.        Troca a tela de login pelas abas principais.        """        if self.login_frame is not None:            self.login_frame.destroy()            self.login_frame = None        # Habilita opÃ§Ã£o de logout        self.menu_sessao.entryconfig("Logout", state=tk.NORMAL)        # Cria notebook com as principais funcionalidades        self.notebook = ttk.Notebook(self._main_container)        # Abas: Produtos, Vendas, Pedidos, RelatÃ³rios        self.products_tab = ProductFrame(self.notebook, self.db)        self.sales_tab = SalesFrame(self.notebook, self.db)        self.fulfillment_tab = FulfillmentFrame(self.notebook, self.db)        self.reports_tab = ReportsFrame(self.notebook, self.db)        self.notebook.add(self.products_tab, text="Produtos")        self.notebook.add(self.sales_tab, text="Vendas")        self.notebook.add(self.fulfillment_tab, text="Pedidos")        self.notebook.add(self.reports_tab, text="RelatÃ³rios")        self.notebook.pack(fill=tk.BOTH, expand=True)        # Feedback rÃ¡pido        messagebox.showinfo("Bem-vindo", f"Login efetuado como: {username}")    def logout(self) -> None:        """Efetua logout retornando Ã  tela de login."""        resposta = messagebox.askyesno("Logout", "Deseja encerrar a sessÃ£o atual?")        if not resposta:            return        self.show_login()if __name__ == "__main__":    # Inicia a aplicaÃ§Ã£o Tkinter    app = App()    app.mainloop()